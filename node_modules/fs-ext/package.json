{
  "author": {
    "name": "Matt Sergeant",
    "email": "helpme@gmail.com",
    "url": "http://baudehlo.wordpress.com/"
  },
  "name": "fs-ext",
  "description": "Extensions to core 'fs' module.",
  "keywords": [
    "fs",
    "filesystem",
    "flock",
    "seek"
  ],
  "version": "0.4.6",
  "homepage": "https://github.com/baudehlo/node-fs-ext/",
  "repository": {
    "type": "git",
    "url": "git://github.com/baudehlo/node-fs-ext.git"
  },
  "main": "fs-ext.js",
  "engines": {
    "node": ">= v0.8.0"
  },
  "dependencies": {
    "nan": "^2.0"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "bugs": {
    "url": "https://github.com/baudehlo/node-fs-ext/issues"
  },
  "scripts": {
    "install": "node-gyp configure build",
    "test": "./run_tests"
  },
  "gitHead": "beb3c6acc3baa4f79b16c6ca918069d63a8bc13b",
  "readme": "fs-ext\n======\n\nExtras not included in Node's fs module.\n\nInstallation\n------------\n\nInstall via npm:\n\n    npm install fs-ext\n\nUsage\n-----\n\nfs-ext imports all of the methods from the core 'fs' module, so you don't\nneed two objects.\n\n```js\nvar fs = require('fs-ext');\nvar fd = fs.openSync('foo.txt', 'r');\nfs.flock(fd, 'ex', function (err) {\n    if (err) {\n        return console.log(\"Couldn't lock file\");\n    }\n    // file is locked\n})\n```\n\nFor an advanced example checkout `example.js`.\n\nAPI\n---\n\n### fs.flock(fd, flags, [callback])\n\nAsynchronous flock(2). No arguments other than a possible error are passed to\nthe callback. Flags can be 'sh', 'ex', 'shnb', 'exnb', 'un' and correspond\nto the various LOCK_SH, LOCK_EX, LOCK_SH|LOCK_NB, etc.\n\n### fs.flockSync(fd, flags)\n\nSynchronous flock(2). Throws an exception on error.\n\n### fs.fcntl(fd, cmd, [arg], [callback])\n\nAsynchronous fcntl(2).\n\ncallback will be given two arguments (err, result).\n\nThe supported commands are:\n\n- 'getfd' ( F_GETFD )\n- 'setfd' ( F_SETFD )\n\nRequiring this module adds `FD_CLOEXEC` to the constants module, for use with F_SETFD.\n\n### fs.fcntlSync(fd, flags)\n\nSynchronous fcntl(2). Throws an exception on error.\n\n### fs.seek(fd, offset, whence, [callback])\n\nAsynchronous lseek(2).  \n\ncallback will be given two arguments (err, currFilePos).\n\nwhence can be 0 (SEEK_SET) to set the new position in bytes to offset, \n1 (SEEK_CUR) to set the new position to the current position plus offset \nbytes (can be negative), or 2 (SEEK_END) to set to the end of the file \nplus offset bytes (usually negative or zero to seek to the end of the file).\n\n### fs.seekSync(fd, offset, whence)\n\nSynchronous lseek(2). Throws an exception on error.  Returns current\nfile position.\n\n\n### fs.utime(path [, atime, mtime] [, callback])\n\nAsynchronous utime(2).\n\nArguments `atime` and `mtime` are in seconds as for the system call.  Note\nthat the number value of Date() is in milliseconds, so to use the 'now'\nvalue with `fs.utime()` you would have to divide by 1000 first, e.g. \nDate.now()/1000\n\nJust like for utime(2), the absence of the `atime` and `mtime` means 'now'.\n\n### fs.utimeSync(path [, atime, mtime])\n\nSynchronous version of utime().  Throws an exception on error.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "fs-ext@0.4.6",
  "_shasum": "1a05e1255203623a4f04e2cb07e54b83b065f4cc",
  "_from": "git+https://github.com/baudehlo/node-fs-ext.git",
  "_resolved": "git+https://github.com/baudehlo/node-fs-ext.git#beb3c6acc3baa4f79b16c6ca918069d63a8bc13b"
}
